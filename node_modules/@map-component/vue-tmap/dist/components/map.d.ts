/// <reference types="@map-component/tmap-types" />
/// <reference types="@map-component/tmap-types" />
/// <reference types="@map-component/tmap-types" />
/// <reference types="@map-component/tmap-types" />
/// <reference types="@map-component/tmap-types" />
import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    version: {
        type: StringConstructor;
        default: string;
    };
    mapKey: {
        type: StringConstructor;
        default: string;
    };
    libraries: {
        type: PropType<string[]>;
        default: () => never[];
    };
    class: {
        type: StringConstructor;
        default: string;
    };
    style: {
        type: PropType<{}>;
        default: () => {};
    };
    center: {
        type: PropType<{
            lat: number;
            lng: number;
        }>;
        default: () => {
            lat: number;
            lng: number;
        };
    };
    zoom: {
        type: NumberConstructor;
        default: number;
    };
    minZoom: {
        type: NumberConstructor;
        default: number;
    };
    maxZoom: {
        type: NumberConstructor;
        default: number;
    };
    rotation: {
        type: NumberConstructor;
        default: number;
    };
    pitch: {
        type: NumberConstructor;
        default: number;
    };
    scale: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: PropType<{
            x: number;
            y: number;
        }>;
        default: () => {
            x: number;
            y: number;
        };
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollable: {
        type: BooleanConstructor;
        default: boolean;
    };
    doubleClickZoom: {
        type: BooleanConstructor;
        default: boolean;
    };
    boundary: {
        type: PropType<TMap.LatLngBounds>;
        default: null;
    };
    mapStyleId: {
        type: StringConstructor;
    };
    baseMap: {
        type: PropType<TMap.BaseMap>;
    };
    viewMode: {
        type: PropType<"2D" | "3D">;
        default: string;
    };
    control: {
        type: PropType<{
            scale: {
                position: string;
                className: string;
            };
            zoom: {
                position: string;
                className: string;
            };
            rotation: {
                position: string;
                className: string;
            };
        }>;
        default: () => {
            scale: {};
            zoom: {};
            rotation: {};
        };
    };
    events: {
        type: PropType<{
            [key: string]: Function;
        }>;
        default: () => {};
    };
}, {
    map: import("vue").Ref<{
        setCenter: (center: TMap.LatLng) => TMap.Map;
        setZoom: (zoom: number) => TMap.Map;
        setRotation: (rotation: number) => TMap.Map;
        setPitch: (pitch: number) => TMap.Map;
        setScale: (scale: number) => TMap.Map;
        setOffset: (offset: TMap.Offset) => TMap.Map;
        setDraggable: (draggable: boolean) => TMap.Map;
        setScrollable: (scrollable: boolean) => TMap.Map;
        setDoubleClickZoom: (doubleClickZoom: boolean) => TMap.Map;
        setBoundary: (boundary: TMap.LatLngBounds) => TMap.Map;
        setViewMode: (viewMode: TMap.ViewMode) => TMap.Map;
        setBaseMap: (baseMap: TMap.BaseMap | TMap.BaseMap[]) => TMap.Map;
        setMapStyleId: (mapStyleId: string) => TMap.Map;
        panTo: (latLng: TMap.LatLng, opts?: TMap.EaseOptions | undefined) => TMap.Map;
        zoomTo: (zoom: number, opts?: TMap.EaseOptions | undefined) => TMap.Map;
        rotateTo: (rotation: number, opts?: TMap.EaseOptions | undefined) => TMap.Map;
        pitchTo: (pitch: number, opts?: TMap.EaseOptions | undefined) => TMap.Map;
        easeTo: (mapStatus: {
            center: TMap.LatLng;
            zoom: number;
            rotation: number;
            pitch: number;
        }, opts?: TMap.EaseOptions | undefined) => TMap.Map;
        fitBounds: (bounds: TMap.LatLngBounds, options: TMap.FitBoundsOptions) => TMap.Map;
        getCenter: () => TMap.LatLng;
        getZoom: () => number;
        getRotation: () => number;
        getPitch: () => number;
        getBounds: () => TMap.LatLngBounds;
        getScale: () => number;
        getOffset: () => TMap.Offset;
        getDraggable: () => boolean;
        getScrollable: () => boolean;
        getDoubleClickZoom: () => boolean;
        getBoundary: () => TMap.LatLngBounds;
        addControl: (control: TMap.Control) => TMap.Map;
        removeControl: (id: TMap.constants.DEFAULT_CONTROL_ID) => TMap.Map;
        getControl: (id: TMap.constants.DEFAULT_CONTROL_ID) => TMap.Control;
        getViewMode: () => TMap.ViewMode;
        getBaseMap: () => TMap.BaseMap | TMap.BaseMap[];
        destroy: () => TMap.GeometryOverlay;
        getLayer: (id: string) => TMap.GeometryOverlay;
        projectToContainer: (latLng: TMap.LatLng) => TMap.Point;
        unprojectFromContainer: (pixel: TMap.Point) => TMap.LatLng;
        on: {
            (eventName: string, listener: Function): TMap.Map;
            (eventName: TMap.MapEventName, listener: TMap.MapEventListener): TMap.Map;
            (eventName: TMap.MapOtherEventName, listener: () => void): TMap.Map;
        };
        off: {
            (eventName: string, listener: Function): TMap.Map;
            (eventName: TMap.MapEventName, listener: TMap.MapEventListener): TMap.Map;
            (eventName: TMap.MapOtherEventName, listener: () => void): TMap.Map;
        };
    } | null>;
    el: import("vue").Ref<HTMLElement | null>;
    getCenter: () => TMap.LatLng;
    getZoom: () => number;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    version: {
        type: StringConstructor;
        default: string;
    };
    mapKey: {
        type: StringConstructor;
        default: string;
    };
    libraries: {
        type: PropType<string[]>;
        default: () => never[];
    };
    class: {
        type: StringConstructor;
        default: string;
    };
    style: {
        type: PropType<{}>;
        default: () => {};
    };
    center: {
        type: PropType<{
            lat: number;
            lng: number;
        }>;
        default: () => {
            lat: number;
            lng: number;
        };
    };
    zoom: {
        type: NumberConstructor;
        default: number;
    };
    minZoom: {
        type: NumberConstructor;
        default: number;
    };
    maxZoom: {
        type: NumberConstructor;
        default: number;
    };
    rotation: {
        type: NumberConstructor;
        default: number;
    };
    pitch: {
        type: NumberConstructor;
        default: number;
    };
    scale: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: PropType<{
            x: number;
            y: number;
        }>;
        default: () => {
            x: number;
            y: number;
        };
    };
    draggable: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollable: {
        type: BooleanConstructor;
        default: boolean;
    };
    doubleClickZoom: {
        type: BooleanConstructor;
        default: boolean;
    };
    boundary: {
        type: PropType<TMap.LatLngBounds>;
        default: null;
    };
    mapStyleId: {
        type: StringConstructor;
    };
    baseMap: {
        type: PropType<TMap.BaseMap>;
    };
    viewMode: {
        type: PropType<"2D" | "3D">;
        default: string;
    };
    control: {
        type: PropType<{
            scale: {
                position: string;
                className: string;
            };
            zoom: {
                position: string;
                className: string;
            };
            rotation: {
                position: string;
                className: string;
            };
        }>;
        default: () => {
            scale: {};
            zoom: {};
            rotation: {};
        };
    };
    events: {
        type: PropType<{
            [key: string]: Function;
        }>;
        default: () => {};
    };
}>>, {
    version: string;
    mapKey: string;
    libraries: string[];
    class: string;
    style: {};
    center: {
        lat: number;
        lng: number;
    };
    zoom: number;
    minZoom: number;
    maxZoom: number;
    rotation: number;
    pitch: number;
    scale: number;
    offset: {
        x: number;
        y: number;
    };
    draggable: boolean;
    scrollable: boolean;
    doubleClickZoom: boolean;
    boundary: TMap.LatLngBounds;
    viewMode: "2D" | "3D";
    control: {
        scale: {
            position: string;
            className: string;
        };
        zoom: {
            position: string;
            className: string;
        };
        rotation: {
            position: string;
            className: string;
        };
    };
    events: {
        [key: string]: Function;
    };
}, {}>;
export default _default;
