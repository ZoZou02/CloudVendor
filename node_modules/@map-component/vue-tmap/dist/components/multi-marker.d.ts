/// <reference types="@map-component/tmap-types" />
/// <reference types="@map-component/tmap-types" />
/// <reference types="@map-component/tmap-types" />
import { PropType } from 'vue';
export declare function buildGeometries<T>(geometries: TMap.PointGeometry<T>[]): {
    position: TMap.LatLng;
    rank?: number | undefined;
    id: string;
    styleId: string;
    properties?: T | undefined;
}[];
declare const _default: import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        default: string;
    };
    styles: {
        type: PropType<{
            [key: string]: TMap.MarkerStyleOptions;
        }>;
        required: true;
    };
    geometries: {
        type: PropType<TMap.PointGeometry<any>[]>;
        required: true;
    };
}, {
    getStyles?: undefined;
    moveAlong?: undefined;
    stopMove?: undefined;
    pauseMove?: undefined;
    resumeMove?: undefined;
    on?: undefined;
} | {
    getStyles: () => TMap.MultiMarkerStyleHash;
    moveAlong: (param: TMap.MoveAlongParamSet, options?: {
        autoRotation: boolean;
    } | undefined) => TMap.MultiMarker;
    stopMove: () => TMap.MultiMarker;
    pauseMove: () => TMap.MultiMarker;
    resumeMove: () => TMap.MultiMarker;
    on: {
        (eventName: string, listener: Function): TMap.MultiMarker;
        <T extends TMap.Geometry<unknown>>(eventName: TMap.GeometryEventName, listener: TMap.GeometryOverlayEventListener<T>): TMap.MultiMarker;
        (eventName: "moving", listener: TMap.GeometryOverlayMovingEventListener): TMap.MultiMarker;
        (eventName: TMap.GeometryOverlayAnimateEventName, listener: () => void): TMap.MultiMarker;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        default: string;
    };
    styles: {
        type: PropType<{
            [key: string]: TMap.MarkerStyleOptions;
        }>;
        required: true;
    };
    geometries: {
        type: PropType<TMap.PointGeometry<any>[]>;
        required: true;
    };
}>>, {
    id: string;
}, {}>;
export default _default;
