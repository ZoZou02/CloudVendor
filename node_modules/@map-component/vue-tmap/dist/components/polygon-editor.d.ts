/// <reference types="@map-component/tmap-types" />
/// <reference types="@map-component/tmap-types" />
import { PropType } from 'vue';
declare const _default: import("vue").DefineComponent<{
    id: {
        type: StringConstructor;
        default: string;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    snappable: {
        type: BooleanConstructor;
        default: boolean;
    };
    drawingStyleId: {
        type: StringConstructor;
        default: string;
    };
    selectedStyleId: {
        type: StringConstructor;
        default: string;
    };
    styles: {
        type: PropType<{
            [key: string]: TMap.PolygonStyleOptions;
        }>;
        required: true;
    };
    modelValue: {
        type: PropType<TMap.PolygonGeometry<any>[]>;
        required: true;
    };
    actionMode: {
        type: NumberConstructor;
    };
}, {
    select?: undefined;
    stop?: undefined;
    split?: undefined;
    union?: undefined;
    delete?: undefined;
    destroy?: undefined;
} | {
    select: (idList: string[]) => TMap.tools.GeometryEditor<TMap.MultiPolygon>;
    stop: () => TMap.tools.GeometryEditor<TMap.MultiPolygon>;
    split: () => TMap.tools.GeometryEditor<TMap.MultiPolygon>;
    union: () => TMap.tools.GeometryEditor<TMap.MultiPolygon>;
    delete: () => TMap.tools.GeometryEditor<TMap.MultiPolygon>;
    destroy: () => TMap.tools.GeometryEditor<TMap.MultiPolygon>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:modelValue" | "select" | "error")[], "update:modelValue" | "select" | "error", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    id: {
        type: StringConstructor;
        default: string;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    snappable: {
        type: BooleanConstructor;
        default: boolean;
    };
    drawingStyleId: {
        type: StringConstructor;
        default: string;
    };
    selectedStyleId: {
        type: StringConstructor;
        default: string;
    };
    styles: {
        type: PropType<{
            [key: string]: TMap.PolygonStyleOptions;
        }>;
        required: true;
    };
    modelValue: {
        type: PropType<TMap.PolygonGeometry<any>[]>;
        required: true;
    };
    actionMode: {
        type: NumberConstructor;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onSelect?: ((...args: any[]) => any) | undefined;
    onError?: ((...args: any[]) => any) | undefined;
}, {
    id: string;
    zIndex: number;
    snappable: boolean;
    drawingStyleId: string;
    selectedStyleId: string;
}, {}>;
export default _default;
